(()=>{"use strict";class e{constructor(e){this.model=e,this.table=document.querySelector(".products-list"),this.modalDelete=document.querySelector(".modal-delete"),this.container=document.querySelector(".modal-container")}addTicketInTable(e){this.table.innerHTML="",e.forEach((e=>{const t=document.createElement("td");t.classList.add("ticket-status"),e.status?t.innerHTML=' <i class="far fa-check-circle fa-lg"></i>':t.innerHTML='<i class="far fa-circle fa-lg"></i>';const i=document.createElement("tr");i.classList.add("product-item"),i.innerHTML=`\n               <td class="ticket-name">\n                    ${e.name}\n                    <div class="ticket-description hidden">\n                        <i class="fas fa-spinner fa-pulse"></i>\n                    </div>\n               </td>\n                <td class="ticket-created">${e.created}</td>\n                <td class="ticket-move">\n                    <div class="ticket-edit">\n                        <i class="far fa-edit fa-lg"></i>\n                    </div>\n                    <div class="ticket-delete">\n                        <i class="far fa-times-circle fa-lg"></i>\n                    </div>\n                </td>`,i.insertAdjacentElement("afterbegin",t),this.table.appendChild(i),this.deleteTicket(e,i),this.update(e,i),this.checkTicket(e,t),this.showDescription(e,i)}))}deleteTicket(e,t){t.querySelector(".ticket-delete").addEventListener("click",(()=>{this.modalDelete.classList.remove("hidden"),this.modalDelete.addEventListener("reset",(()=>{this.modalDelete.classList.add("hidden")})),this.modalDelete.addEventListener("submit",(t=>{t.preventDefault(),this.model.delete(e.id),this.modalDelete.classList.add("hidden")}))}))}update(e,t){t.querySelector(".ticket-edit").addEventListener("click",(()=>{this.model.createForm(this.container).changeTicket(e)}))}checkTicket(e,t){t.addEventListener("click",(()=>{this.model.updateStatus(e.id)}))}showDescription(e,t){t.querySelector(".ticket-name").addEventListener("click",(()=>{t.querySelector(".ticket-description").classList.contains("hidden")?(t.querySelector(".ticket-description").classList.remove("hidden"),this.model.getById(e.id).then((e=>{t.querySelector(".ticket-description").textContent=e[0].description}))):t.querySelector(".ticket-description").classList.add("hidden")}))}}class t{constructor(e,t){this.container=e,this.model=t,this.form=null}createForm(e){const t=document.createElement("form");t.classList.add("modal-form"),t.innerHTML=`<h2>${e}</h2>\n            <label class="product-name" for="name">Краткое описание</label>\n            <input class="name" id="name" type="text" name="name" required>\n            <label class="product-description" for="description">Полное описание</label>\n            <input class="description" id="description" type="text" name="description">\n            <div class="btn-form-container">\n                <button class="btn-reset" type="reset">Отмена</button>\n                <button class="btn-submit" type="submit">Оk</button>\n            </div>`,this.container.appendChild(t),this.form=t,this.resetForm()}changeTicket(e){this.createForm("Изменить тикет");const t=this.form.querySelector(".name"),i=this.form.querySelector(".description");this.model.getById(e.id).then((s=>{t.value=e.name,i.value=s[0].description,this.form.addEventListener("submit",(t=>{t.preventDefault();const i=new FormData(this.form);this.model.update(i,e.id),this.form.reset(),this.form.remove(),this.form=null}))}))}resetForm(){this.form.querySelector(".btn-reset").onclick=()=>{this.form.remove(),this.form=null}}submitForm(){this.form.addEventListener("submit",(t=>{t.preventDefault();const i=new FormData(this.form);this.model.save(i);this.model.getAll().then((t=>{new e(this.model).addTicketInTable(t),this.form.reset(),this.form.remove(),this.form=null}))}))}}const i=new class{constructor(){this.serverURL="https://ahj-http-server.herokuapp.com"}start(){this.getAll().then((t=>{new e(this).addTicketInTable(t)}))}createForm(e){return new t(e,this)}async getAll(){return(await fetch(`${this.serverURL}?method=allTickets`)).json()}async save(e){const t={name:e.get("name"),description:e.get("description")};await fetch(`${this.serverURL}/?method=createTicket`,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)}),this.start()}async delete(e){await fetch(`${this.serverURL}?method=deleteTicket&id=${e}`),this.start()}async getById(e){return(await fetch(`${this.serverURL}?method=ticketById&id=${e}`)).json()}async update(e,t){const i={name:e.get("name"),description:e.get("description"),id:t};await fetch(`${this.serverURL}/?method=changeTicket&id=${t}`,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(i)}),this.start()}async updateStatus(e){await fetch(`${this.serverURL}/?method=changeStatus&id=${e}`,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({id:e})}),this.start()}},s=document.querySelector(".btn-add"),n=document.querySelector(".modal-container");document.addEventListener("DOMContentLoaded",(()=>{i.getAll().then((t=>{new e(i).addTicketInTable(t)}))})),s.addEventListener("click",(()=>{const e=new t(n,i);e.createForm("Добавить тикет"),e.submitForm()}))})();